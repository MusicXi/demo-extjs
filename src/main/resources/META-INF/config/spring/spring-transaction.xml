<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans"  
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"  
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"  
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd  
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd  
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd">  
	
	<bean id="dataSource1" class="com.atomikos.jdbc.AtomikosDataSourceBean"  
		init-method="init" destroy-method="close">  
		<property name="uniqueResourceName" value="ds1" />  
		<property name="xaDataSourceClassName"  
			value="com.mysql.jdbc.jdbc2.optional.MysqlXADataSource" />  
		<property name="xaProperties">  
			<props>  
				<prop key="url">jdbc:mysql://192.168.150.131:3306/db_myron_extjs?zeroDateTimeBehavior=convertToNull</prop>  
				<prop key="user">root</prop>  
				<prop key="password">123456</prop>  
			</props>  
		</property>  
		<property name="minPoolSize" value="10" />  
		<property name="maxPoolSize" value="100" />  
		<property name="borrowConnectionTimeout" value="30" />  
		<property name="testQuery" value="select 1" />  
		<property name="maintenanceInterval" value="60" />  
	</bean>  
  
  
	<bean id="dataSource2" class="com.atomikos.jdbc.AtomikosDataSourceBean"  
		init-method="init" destroy-method="close">  
		<property name="uniqueResourceName" value="ds2" />  
		<property name="xaDataSourceClassName"  
			value="com.mysql.jdbc.jdbc2.optional.MysqlXADataSource" />  
		<property name="xaProperties">  
			<props>  
				<prop key="url">jdbc:mysql://192.168.150.131:3306/dfos?zeroDateTimeBehavior=convertToNull</prop>  
				<prop key="user">root</prop>  
				<prop key="password">123456</prop>  
			</props>  
		</property>  
		<property name="minPoolSize" value="10" />  
		<property name="maxPoolSize" value="100" />  
		<property name="borrowConnectionTimeout" value="30" />  
		<property name="testQuery" value="select 1" />  
		<property name="maintenanceInterval" value="60" />  
	</bean>  
  

  
  
	<!--SqlMap setup for MyBatis Database Layer -->  
	<bean id="sqlSessionFactoryForD1" class="org.mybatis.spring.SqlSessionFactoryBean">  
		<property name="dataSource" ref="dataSource1" />  
		<property name="mapperLocations" value="classpath:META-INF/config/mappings/*.xml"/>    
		<property name="configLocation" value="classpath:META-INF/config/mybatis-config.xml"/>    
	</bean>  
	<bean id="sqlSessionTemplateForD1" class="org.mybatis.spring.SqlSessionTemplate">  
		<constructor-arg index="0" ref="sqlSessionFactoryForD1" />  
	</bean>  
	
  
	<bean id="sqlSessionFactoryForD2" class="org.mybatis.spring.SqlSessionFactoryBean">  
		<property name="dataSource" ref="dataSource2" />  
		<property name="mapperLocations" value="classpath:META-INF/config/mappings/*.xml"/>    
		<property name="configLocation" value="classpath:META-INF/config/mybatis-config.xml"/>    
	</bean>  
	<bean id="sqlSessionTemplateForD2" class="org.mybatis.spring.SqlSessionTemplate">  
		<constructor-arg index="0" ref="sqlSessionFactoryForD2" />  
	</bean>  
  
  
  	<!--分布式事务管理器-->
	<!-- Config JTA UserTransactionManager Impl -->  
	<bean id="atomikosTransactionManager" class="com.atomikos.icatch.jta.UserTransactionManager"  
		init-method="init" destroy-method="close">  
		<property name="forceShutdown" value="false"/>
	</bean>  
  
	<!-- Config JTA UserTransaction Impl -->  
	<bean id="atomikosUserTransaction" class="com.atomikos.icatch.jta.UserTransactionImp">  
		<property name="transactionTimeout" value="300"/>  
	</bean>  
  
  
  	<!-- 配置spring分布式事务 -->
  	<!--Spring的AOP代理所使用的事务处理器springJTATransactionManager，这是Spring自带的JTA实现类，但是Spring只负责提供接口，真正内部实现分布式事务的上面定义
		的两个对象
	-->
	<!-- Spring JtaTransactionManager Config -->  
	<bean id="jtaTransactionManager"  class="org.springframework.transaction.jta.JtaTransactionManager">  
		<property name="transactionManager" ref="atomikosTransactionManager"/>  
        <property name="userTransaction" ref="atomikosUserTransaction"/> 
	</bean>  
  
  	<!--
	<bean id="transactionManager"  
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
		<property name="dataSource" ref="dataSource1" />  
	</bean>  
  	-->
  	
	<!-- <tx:jta-transaction-manager /> -->
    <!--可通过注解控制事务，也可以配置拦截器方式配置事务 -->
    <tx:annotation-driven transaction-manager="jtaTransactionManager" />

  
  
  
  
</beans> 